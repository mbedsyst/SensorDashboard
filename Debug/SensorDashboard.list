
SensorDashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080003d0  080003d0  000013d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000013e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000013e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000500  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ed  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000058  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000001c2  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b11  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f7ec  00000000  00000000  000028bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000520a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000011c  00000000  00000000  000520ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00052208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003b8 	.word	0x080003b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003b8 	.word	0x080003b8

080001d4 <Compute_UART_Baud>:
#define UART_BAUDRATE	115200
#define SYS_FREQ		16000000
#define APB2_CLK		SYS_FREQ

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	085a      	lsrs	r2, r3, #1
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	441a      	add	r2, r3
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ec:	b29b      	uxth	r3, r3
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
	...

080001fc <UART6_SetBaudRate>:

static void UART6_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	USART6->BRR = Compute_UART_Baud(periph_clk,baudrate);
 8000206:	6839      	ldr	r1, [r7, #0]
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f7ff ffe3 	bl	80001d4 <Compute_UART_Baud>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	4b03      	ldr	r3, [pc, #12]	@ (8000220 <UART6_SetBaudRate+0x24>)
 8000214:	609a      	str	r2, [r3, #8]
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40011400 	.word	0x40011400

08000224 <UART6_Init>:

void UART6_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000228:	4b1b      	ldr	r3, [pc, #108]	@ (8000298 <UART6_Init+0x74>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a1a      	ldr	r2, [pc, #104]	@ (8000298 <UART6_Init+0x74>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART6*/
	RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8000234:	4b18      	ldr	r3, [pc, #96]	@ (8000298 <UART6_Init+0x74>)
 8000236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000238:	4a17      	ldr	r2, [pc, #92]	@ (8000298 <UART6_Init+0x74>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6453      	str	r3, [r2, #68]	@ 0x44
	/*Set PA11 & PA12 to alternate function mode */
	GPIOA->MODER &=~((3U<<22) | (3U<<24));
 8000240:	4b16      	ldr	r3, [pc, #88]	@ (800029c <UART6_Init+0x78>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a15      	ldr	r2, [pc, #84]	@ (800029c <UART6_Init+0x78>)
 8000246:	f023 7370 	bic.w	r3, r3, #62914560	@ 0x3c00000
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=((2U<<22) | (2U<<24));
 800024c:	4b13      	ldr	r3, [pc, #76]	@ (800029c <UART6_Init+0x78>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a12      	ldr	r2, [pc, #72]	@ (800029c <UART6_Init+0x78>)
 8000252:	f043 7320 	orr.w	r3, r3, #41943040	@ 0x2800000
 8000256:	6013      	str	r3, [r2, #0]
	/*Set PA11 alternate function type to (AF08)*/
	GPIOA->AFR[1] &= ~((0xF << 12) | (0xF << 16));
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <UART6_Init+0x78>)
 800025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800025c:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <UART6_Init+0x78>)
 800025e:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8000262:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (8U << 12) | (8U << 16);
 8000264:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <UART6_Init+0x78>)
 8000266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000268:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <UART6_Init+0x78>)
 800026a:	f443 2308 	orr.w	r3, r3, #557056	@ 0x88000
 800026e:	6253      	str	r3, [r2, #36]	@ 0x24
	/*Configure Baud Rate*/
	UART6_SetBaudRate(APB2_CLK,UART_BAUDRATE);
 8000270:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000274:	480a      	ldr	r0, [pc, #40]	@ (80002a0 <UART6_Init+0x7c>)
 8000276:	f7ff ffc1 	bl	80001fc <UART6_SetBaudRate>
	/*Configure the Transfer directions*/
	USART6->CR1 |= (USART_CR1_TE);
 800027a:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <UART6_Init+0x80>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a09      	ldr	r2, [pc, #36]	@ (80002a4 <UART6_Init+0x80>)
 8000280:	f043 0308 	orr.w	r3, r3, #8
 8000284:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART6->CR1 |= USART_CR1_UE;
 8000286:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <UART6_Init+0x80>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a06      	ldr	r2, [pc, #24]	@ (80002a4 <UART6_Init+0x80>)
 800028c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000290:	60d3      	str	r3, [r2, #12]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000
 80002a0:	00f42400 	.word	0x00f42400
 80002a4:	40011400 	.word	0x40011400

080002a8 <UART6_TxChar>:

void UART6_TxChar(char ch)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART6->SR & USART_SR_TXE));
 80002b2:	bf00      	nop
 80002b4:	4b07      	ldr	r3, [pc, #28]	@ (80002d4 <UART6_TxChar+0x2c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0f9      	beq.n	80002b4 <UART6_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART6->DR = (ch &0xFF);
 80002c0:	4a04      	ldr	r2, [pc, #16]	@ (80002d4 <UART6_TxChar+0x2c>)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	6053      	str	r3, [r2, #4]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40011400 	.word	0x40011400

080002d8 <UART6_TxString>:

void UART6_TxString(char *str)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while(*str)
 80002e0:	e006      	b.n	80002f0 <UART6_TxString+0x18>
	{
		UART6_TxChar(*str++);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	607a      	str	r2, [r7, #4]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffdc 	bl	80002a8 <UART6_TxChar>
	while(*str)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d1f4      	bne.n	80002e2 <UART6_TxString+0xa>
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <main>:
#include "stm32f4xx.h"
#include "UART.h" // Header file for UART6 driver

int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
    /* Initialize UART6 */
    UART6_Init();
 8000308:	f7ff ff8c 	bl	8000224 <UART6_Init>

    /* Print Hello World using UART6 */
    UART6_TxString("Hello World!\r\n");
 800030c:	4802      	ldr	r0, [pc, #8]	@ (8000318 <main+0x14>)
 800030e:	f7ff ffe3 	bl	80002d8 <UART6_TxString>

    /* Infinite loop */
    while (1)
 8000312:	bf00      	nop
 8000314:	e7fd      	b.n	8000312 <main+0xe>
 8000316:	bf00      	nop
 8000318:	080003d0 	.word	0x080003d0

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	@ (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	@ (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	@ (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	@ (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f811 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ffd9 	bl	8000304 <main>

08000352 <LoopForever>:

LoopForever:
  b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000360:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000364:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000368:	2000001c 	.word	0x2000001c

0800036c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC_IRQHandler>
	...

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	@ (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	@ (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	@ (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	@ (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003e0 	.word	0x080003e0
 80003ac:	080003e0 	.word	0x080003e0
 80003b0:	080003e0 	.word	0x080003e0
 80003b4:	080003e4 	.word	0x080003e4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr


SensorDashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001018  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080011b8  080011b8  000021b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001210  08001210  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001210  08001210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001218  08001218  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001218  08001218  00002218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800121c  0800121c  0000221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001220  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08001270  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001270  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fae  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004bb  00000000  00000000  0000402e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  000044f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a7  00000000  00000000  000045e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ec49  00000000  00000000  0000468f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001953  00000000  00000000  000132d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005394d  00000000  00000000  00014c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00068578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007a8  00000000  00000000  000685bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00068d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080011a0 	.word	0x080011a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	080011a0 	.word	0x080011a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RTC_Init>:
#include "RTC.h"
#include "UART.h"

void RTC_Init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	PWR->CR |= PWR_CR_DBP;
 8000284:	4b23      	ldr	r3, [pc, #140]	@ (8000314 <RTC_Init+0x94>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a22      	ldr	r2, [pc, #136]	@ (8000314 <RTC_Init+0x94>)
 800028a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028e:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= (16<<16);
 8000290:	4b21      	ldr	r3, [pc, #132]	@ (8000318 <RTC_Init+0x98>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a20      	ldr	r2, [pc, #128]	@ (8000318 <RTC_Init+0x98>)
 8000296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800029a:	6093      	str	r3, [r2, #8]
	RCC->BDCR |= RCC_BDCR_RTCSEL;
 800029c:	4b1e      	ldr	r3, [pc, #120]	@ (8000318 <RTC_Init+0x98>)
 800029e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80002a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000318 <RTC_Init+0x98>)
 80002a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80002a6:	6713      	str	r3, [r2, #112]	@ 0x70
	RCC->BDCR |= RCC_BDCR_RTCEN;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <RTC_Init+0x98>)
 80002aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80002ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000318 <RTC_Init+0x98>)
 80002ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002b2:	6713      	str	r3, [r2, #112]	@ 0x70
	RTC->WPR |= 0xCA;
 80002b4:	4b19      	ldr	r3, [pc, #100]	@ (800031c <RTC_Init+0x9c>)
 80002b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002b8:	4a18      	ldr	r2, [pc, #96]	@ (800031c <RTC_Init+0x9c>)
 80002ba:	f043 03ca 	orr.w	r3, r3, #202	@ 0xca
 80002be:	6253      	str	r3, [r2, #36]	@ 0x24
	RTC->WPR |= 0x53;
 80002c0:	4b16      	ldr	r3, [pc, #88]	@ (800031c <RTC_Init+0x9c>)
 80002c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002c4:	4a15      	ldr	r2, [pc, #84]	@ (800031c <RTC_Init+0x9c>)
 80002c6:	f043 0353 	orr.w	r3, r3, #83	@ 0x53
 80002ca:	6253      	str	r3, [r2, #36]	@ 0x24
	RTC->ISR |= RTC_ISR_INIT;
 80002cc:	4b13      	ldr	r3, [pc, #76]	@ (800031c <RTC_Init+0x9c>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a12      	ldr	r2, [pc, #72]	@ (800031c <RTC_Init+0x9c>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002d6:	60d3      	str	r3, [r2, #12]
	while(!(RTC->ISR & RTC_ISR_INITF));
 80002d8:	bf00      	nop
 80002da:	4b10      	ldr	r3, [pc, #64]	@ (800031c <RTC_Init+0x9c>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <RTC_Init+0x5a>
	RTC->PRER |= 0x00000000;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <RTC_Init+0x9c>)
 80002e8:	4a0c      	ldr	r2, [pc, #48]	@ (800031c <RTC_Init+0x9c>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	6113      	str	r3, [r2, #16]
	RTC->PRER |= (0x7C<<16);
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <RTC_Init+0x9c>)
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <RTC_Init+0x9c>)
 80002f4:	f443 03f8 	orr.w	r3, r3, #8126464	@ 0x7c0000
 80002f8:	6113      	str	r3, [r2, #16]
	RTC->PRER |= (0x1F3F<<0);
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <RTC_Init+0x9c>)
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	4a07      	ldr	r2, [pc, #28]	@ (800031c <RTC_Init+0x9c>)
 8000300:	f443 53f9 	orr.w	r3, r3, #7968	@ 0x1f20
 8000304:	f043 031f 	orr.w	r3, r3, #31
 8000308:	6113      	str	r3, [r2, #16]
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40007000 	.word	0x40007000
 8000318:	40023800 	.word	0x40023800
 800031c:	40002800 	.word	0x40002800

08000320 <RTC_SetDate>:

void RTC_SetDate(RTC_Date *D)
{
 8000320:	b480      	push	{r7}
 8000322:	b08b      	sub	sp, #44	@ 0x2c
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	int yt, yu, wd, mt, mu, dt, du;
	uint32_t d;
	D->year = D->year - 2000;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	609a      	str	r2, [r3, #8]
	yt = D->year/10;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a31      	ldr	r2, [pc, #196]	@ (8000400 <RTC_SetDate+0xe0>)
 800033a:	fb82 1203 	smull	r1, r2, r2, r3
 800033e:	1092      	asrs	r2, r2, #2
 8000340:	17db      	asrs	r3, r3, #31
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	627b      	str	r3, [r7, #36]	@ 0x24
	yu = D->year%10;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689a      	ldr	r2, [r3, #8]
 800034a:	4b2d      	ldr	r3, [pc, #180]	@ (8000400 <RTC_SetDate+0xe0>)
 800034c:	fb83 1302 	smull	r1, r3, r3, r2
 8000350:	1099      	asrs	r1, r3, #2
 8000352:	17d3      	asrs	r3, r2, #31
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	460b      	mov	r3, r1
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	440b      	add	r3, r1
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	1ad3      	subs	r3, r2, r3
 8000360:	623b      	str	r3, [r7, #32]
	wd = D->week_day;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	61fb      	str	r3, [r7, #28]
	mt = D->month/10;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a24      	ldr	r2, [pc, #144]	@ (8000400 <RTC_SetDate+0xe0>)
 800036e:	fb82 1203 	smull	r1, r2, r2, r3
 8000372:	1092      	asrs	r2, r2, #2
 8000374:	17db      	asrs	r3, r3, #31
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	61bb      	str	r3, [r7, #24]
	mu = D->month%10;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <RTC_SetDate+0xe0>)
 8000380:	fb83 1302 	smull	r1, r3, r3, r2
 8000384:	1099      	asrs	r1, r3, #2
 8000386:	17d3      	asrs	r3, r2, #31
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	460b      	mov	r3, r1
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	440b      	add	r3, r1
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	1ad3      	subs	r3, r2, r3
 8000394:	617b      	str	r3, [r7, #20]
	dt = D->day/10;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a19      	ldr	r2, [pc, #100]	@ (8000400 <RTC_SetDate+0xe0>)
 800039c:	fb82 1203 	smull	r1, r2, r2, r3
 80003a0:	1092      	asrs	r2, r2, #2
 80003a2:	17db      	asrs	r3, r3, #31
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	613b      	str	r3, [r7, #16]
	du = D->day%10;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <RTC_SetDate+0xe0>)
 80003ae:	fb83 1302 	smull	r1, r3, r3, r2
 80003b2:	1099      	asrs	r1, r3, #2
 80003b4:	17d3      	asrs	r3, r2, #31
 80003b6:	1ac9      	subs	r1, r1, r3
 80003b8:	460b      	mov	r3, r1
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	440b      	add	r3, r1
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	60fb      	str	r3, [r7, #12]
	d = (uint32_t)((yt<<20) | (yu<<16) | (wd<<13) | (mt<<12) | (mu<<8) | (dt<<4) | (du<<0));
 80003c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003c6:	051a      	lsls	r2, r3, #20
 80003c8:	6a3b      	ldr	r3, [r7, #32]
 80003ca:	041b      	lsls	r3, r3, #16
 80003cc:	431a      	orrs	r2, r3
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	035b      	lsls	r3, r3, #13
 80003d2:	431a      	orrs	r2, r3
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	031b      	lsls	r3, r3, #12
 80003d8:	431a      	orrs	r2, r3
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	431a      	orrs	r2, r3
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	431a      	orrs	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	60bb      	str	r3, [r7, #8]
	RTC->DR = d;
 80003ec:	4a05      	ldr	r2, [pc, #20]	@ (8000404 <RTC_SetDate+0xe4>)
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	6053      	str	r3, [r2, #4]
}
 80003f2:	bf00      	nop
 80003f4:	372c      	adds	r7, #44	@ 0x2c
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	66666667 	.word	0x66666667
 8000404:	40002800 	.word	0x40002800

08000408 <RTC_SetTime>:

void RTC_SetTime(RTC_Time *T, bool time_format)
{
 8000408:	b480      	push	{r7}
 800040a:	b08b      	sub	sp, #44	@ 0x2c
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	70fb      	strb	r3, [r7, #3]
	int ht, hu, mt, mu, st, su;
	bool format;
	uint32_t t;
	format = time_format;
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	ht = T->hour/10;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	4a30      	ldr	r2, [pc, #192]	@ (80004e0 <RTC_SetTime+0xd8>)
 8000420:	fb82 1203 	smull	r1, r2, r2, r3
 8000424:	1092      	asrs	r2, r2, #2
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	623b      	str	r3, [r7, #32]
	hu = T->hour%10;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	4b2b      	ldr	r3, [pc, #172]	@ (80004e0 <RTC_SetTime+0xd8>)
 8000432:	fb83 1302 	smull	r1, r3, r3, r2
 8000436:	1099      	asrs	r1, r3, #2
 8000438:	17d3      	asrs	r3, r2, #31
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	460b      	mov	r3, r1
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	440b      	add	r3, r1
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	61fb      	str	r3, [r7, #28]
	mt = T->min/10;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a24      	ldr	r2, [pc, #144]	@ (80004e0 <RTC_SetTime+0xd8>)
 800044e:	fb82 1203 	smull	r1, r2, r2, r3
 8000452:	1092      	asrs	r2, r2, #2
 8000454:	17db      	asrs	r3, r3, #31
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	61bb      	str	r3, [r7, #24]
	mu = T->min%10;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	689a      	ldr	r2, [r3, #8]
 800045e:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <RTC_SetTime+0xd8>)
 8000460:	fb83 1302 	smull	r1, r3, r3, r2
 8000464:	1099      	asrs	r1, r3, #2
 8000466:	17d3      	asrs	r3, r2, #31
 8000468:	1ac9      	subs	r1, r1, r3
 800046a:	460b      	mov	r3, r1
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	440b      	add	r3, r1
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	617b      	str	r3, [r7, #20]
	st = T->seconds/10;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	4a19      	ldr	r2, [pc, #100]	@ (80004e0 <RTC_SetTime+0xd8>)
 800047c:	fb82 1203 	smull	r1, r2, r2, r3
 8000480:	1092      	asrs	r2, r2, #2
 8000482:	17db      	asrs	r3, r3, #31
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	613b      	str	r3, [r7, #16]
	su = T->seconds%10;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <RTC_SetTime+0xd8>)
 800048e:	fb83 1302 	smull	r1, r3, r3, r2
 8000492:	1099      	asrs	r1, r3, #2
 8000494:	17d3      	asrs	r3, r2, #31
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	460b      	mov	r3, r1
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	440b      	add	r3, r1
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	60fb      	str	r3, [r7, #12]
	t = (uint32_t)((format<<22) | (ht<<20) | (hu<<16) | (mt<<12) | (mu<<8) | (st<<4) | (su<<0));
 80004a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004a8:	059a      	lsls	r2, r3, #22
 80004aa:	6a3b      	ldr	r3, [r7, #32]
 80004ac:	051b      	lsls	r3, r3, #20
 80004ae:	431a      	orrs	r2, r3
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	041b      	lsls	r3, r3, #16
 80004b4:	431a      	orrs	r2, r3
 80004b6:	69bb      	ldr	r3, [r7, #24]
 80004b8:	031b      	lsls	r3, r3, #12
 80004ba:	431a      	orrs	r2, r3
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	431a      	orrs	r2, r3
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	431a      	orrs	r2, r3
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	60bb      	str	r3, [r7, #8]
	RTC->TR = t;
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <RTC_SetTime+0xdc>)
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	372c      	adds	r7, #44	@ 0x2c
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	66666667 	.word	0x66666667
 80004e4:	40002800 	.word	0x40002800

080004e8 <RTC_GetTime>:
	D->day = date;
	D->week_day = weekday;
}

void RTC_GetTime(RTC_Time *T)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b08f      	sub	sp, #60	@ 0x3c
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	uint32_t t;
	int format, hour_tens, hour_units, min_tens, min_units, sec_tens, sec_units, hour, min, sec;

	t = RTC->TR;
 80004f0:	4b27      	ldr	r3, [pc, #156]	@ (8000590 <RTC_GetTime+0xa8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	637b      	str	r3, [r7, #52]	@ 0x34

	format     = (t & 0xE000)>>22;
 80004f6:	2300      	movs	r3, #0
 80004f8:	633b      	str	r3, [r7, #48]	@ 0x30
	hour_tens  = (t & 0x300000)>>20;
 80004fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004fc:	0d1b      	lsrs	r3, r3, #20
 80004fe:	f003 0303 	and.w	r3, r3, #3
 8000502:	62fb      	str	r3, [r7, #44]	@ 0x2c
	hour_units = (t & 0xF0000)>>16;
 8000504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	f003 030f 	and.w	r3, r3, #15
 800050c:	62bb      	str	r3, [r7, #40]	@ 0x28
	min_tens   = (t & 0x7000)>>12;
 800050e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000510:	0b1b      	lsrs	r3, r3, #12
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24
	min_units  = (t & 0xF00)>>8;
 8000518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800051a:	0a1b      	lsrs	r3, r3, #8
 800051c:	f003 030f 	and.w	r3, r3, #15
 8000520:	623b      	str	r3, [r7, #32]
	sec_tens   = (t & 0x30)>>4;
 8000522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000524:	091b      	lsrs	r3, r3, #4
 8000526:	f003 0303 	and.w	r3, r3, #3
 800052a:	61fb      	str	r3, [r7, #28]
	sec_units  = (t & 0xF)>>0;
 800052c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	61bb      	str	r3, [r7, #24]

	hour = (hour_tens * 10) + hour_units;
 8000534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	461a      	mov	r2, r3
 8000540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000542:	4413      	add	r3, r2
 8000544:	617b      	str	r3, [r7, #20]
	min = (min_tens * 10) + min_units;
 8000546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000548:	4613      	mov	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	461a      	mov	r2, r3
 8000552:	6a3b      	ldr	r3, [r7, #32]
 8000554:	4413      	add	r3, r2
 8000556:	613b      	str	r3, [r7, #16]
	sec = (sec_tens * 10) + sec_units;
 8000558:	69fa      	ldr	r2, [r7, #28]
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	461a      	mov	r2, r3
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	4413      	add	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]

	T->hour = hour;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	605a      	str	r2, [r3, #4]
	T->min = min;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	609a      	str	r2, [r3, #8]
	T->seconds = sec;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	60da      	str	r2, [r3, #12]
	T->am_pm = format;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	373c      	adds	r7, #60	@ 0x3c
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40002800 	.word	0x40002800

08000594 <RTC_Start>:


void RTC_Start(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	RTC->CR |= RTC_CR_FMT | RTC_CR_TSE;
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <RTC_Start+0x40>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <RTC_Start+0x40>)
 800059e:	f443 6304 	orr.w	r3, r3, #2112	@ 0x840
 80005a2:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <RTC_Start+0x40>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <RTC_Start+0x40>)
 80005aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005ae:	60d3      	str	r3, [r2, #12]
	RTC->WPR &= 0x55;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <RTC_Start+0x40>)
 80005b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b4:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <RTC_Start+0x40>)
 80005b6:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 80005ba:	6253      	str	r3, [r2, #36]	@ 0x24
	PWR->CR &= ~PWR_CR_DBP;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <RTC_Start+0x44>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a05      	ldr	r2, [pc, #20]	@ (80005d8 <RTC_Start+0x44>)
 80005c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40002800 	.word	0x40002800
 80005d8:	40007000 	.word	0x40007000

080005dc <Compute_UART_Baud>:
#define UART_BAUDRATE	115200
#define SYS_FREQ		16000000
#define APB2_CLK		SYS_FREQ

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	085a      	lsrs	r2, r3, #1
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	441a      	add	r2, r3
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f4:	b29b      	uxth	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <UART6_SetBaudRate>:

static void UART6_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	USART6->BRR = Compute_UART_Baud(periph_clk,baudrate);
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ffe3 	bl	80005dc <Compute_UART_Baud>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b03      	ldr	r3, [pc, #12]	@ (8000628 <UART6_SetBaudRate+0x24>)
 800061c:	609a      	str	r2, [r3, #8]
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40011400 	.word	0x40011400

0800062c <UART6_Init>:

void UART6_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <UART6_Init+0x74>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	4a1a      	ldr	r2, [pc, #104]	@ (80006a0 <UART6_Init+0x74>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART6*/
	RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <UART6_Init+0x74>)
 800063e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000640:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <UART6_Init+0x74>)
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	6453      	str	r3, [r2, #68]	@ 0x44
	/*Set PA11 & PA12 to alternate function mode */
	GPIOA->MODER &=~((3U<<22) | (3U<<24));
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <UART6_Init+0x78>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <UART6_Init+0x78>)
 800064e:	f023 7370 	bic.w	r3, r3, #62914560	@ 0x3c00000
 8000652:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=((2U<<22) | (2U<<24));
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <UART6_Init+0x78>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <UART6_Init+0x78>)
 800065a:	f043 7320 	orr.w	r3, r3, #41943040	@ 0x2800000
 800065e:	6013      	str	r3, [r2, #0]
	/*Set PA11 alternate function type to (AF08)*/
	GPIOA->AFR[1] &= ~((0xF << 12) | (0xF << 16));
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <UART6_Init+0x78>)
 8000662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000664:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <UART6_Init+0x78>)
 8000666:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800066a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (8U << 12) | (8U << 16);
 800066c:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <UART6_Init+0x78>)
 800066e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000670:	4a0c      	ldr	r2, [pc, #48]	@ (80006a4 <UART6_Init+0x78>)
 8000672:	f443 2308 	orr.w	r3, r3, #557056	@ 0x88000
 8000676:	6253      	str	r3, [r2, #36]	@ 0x24
	/*Configure Baud Rate*/
	UART6_SetBaudRate(APB2_CLK,UART_BAUDRATE);
 8000678:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800067c:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <UART6_Init+0x7c>)
 800067e:	f7ff ffc1 	bl	8000604 <UART6_SetBaudRate>
	/*Configure the Transfer directions*/
	USART6->CR1 |= (USART_CR1_TE);
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <UART6_Init+0x80>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4a09      	ldr	r2, [pc, #36]	@ (80006ac <UART6_Init+0x80>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART6->CR1 |= USART_CR1_UE;
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <UART6_Init+0x80>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <UART6_Init+0x80>)
 8000694:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000698:	60d3      	str	r3, [r2, #12]
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	00f42400 	.word	0x00f42400
 80006ac:	40011400 	.word	0x40011400

080006b0 <UART6_TxChar>:

void UART6_TxChar(char ch)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART6->SR & USART_SR_TXE));
 80006ba:	bf00      	nop
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <UART6_TxChar+0x2c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <UART6_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART6->DR = (ch &0xFF);
 80006c8:	4a04      	ldr	r2, [pc, #16]	@ (80006dc <UART6_TxChar+0x2c>)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	6053      	str	r3, [r2, #4]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40011400 	.word	0x40011400

080006e0 <UART6_TxString>:

void UART6_TxString(char *str)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	while(*str)
 80006e8:	e006      	b.n	80006f8 <UART6_TxString+0x18>
	{
		UART6_TxChar(*str++);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffdc 	bl	80006b0 <UART6_TxChar>
	while(*str)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f4      	bne.n	80006ea <UART6_TxString+0xa>
	}
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <main>:
    UART6_TxString("\033[2J"); // ANSI escape code to clear the screen
    UART6_TxString("\033[H"); // ANSI escape code to move cursor to (0,0)
}

int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b098      	sub	sp, #96	@ 0x60
 8000710:	af02      	add	r7, sp, #8
    RTC_Time currentTime;
    RTC_Date currentDate;

    // Initialize peripherals
    UART6_Init();
 8000712:	f7ff ff8b 	bl	800062c <UART6_Init>
    RTC_Init();
 8000716:	f7ff fdb3 	bl	8000280 <RTC_Init>

    // Set the current time and date (modify this as per the current time/date)
    currentTime.hour = 10; // Example: 10:30:45 AM
 800071a:	230a      	movs	r3, #10
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    currentTime.min = 30;
 800071e:	231e      	movs	r3, #30
 8000720:	653b      	str	r3, [r7, #80]	@ 0x50
    currentTime.seconds = 45;
 8000722:	232d      	movs	r3, #45	@ 0x2d
 8000724:	657b      	str	r3, [r7, #84]	@ 0x54
    currentTime.am_pm = 0; // 0 for AM, 1 for PM
 8000726:	2300      	movs	r3, #0
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48

    currentDate.day = 21;  // Example: 21st of January, 2025 (Tuesday)
 800072a:	2315      	movs	r3, #21
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
    currentDate.month = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentDate.year = 2025;
 8000732:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
    currentDate.week_day = 2; // 2 corresponds to Tuesday
 8000738:	2302      	movs	r3, #2
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44

    RTC_SetTime(&currentTime, true); // Set time in 24-hour format
 800073c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fe60 	bl	8000408 <RTC_SetTime>
    RTC_SetDate(&currentDate);      // Set date
 8000748:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fde7 	bl	8000320 <RTC_SetDate>

    RTC_Start();
 8000752:	f7ff ff1f 	bl	8000594 <RTC_Start>

    while(1)
    {
		// Retrieve and display time on UART6
		RTC_GetTime(&currentTime);
 8000756:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fec4 	bl	80004e8 <RTC_GetTime>

		char buffer[50];
		snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d\r\n",
 8000760:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000766:	1d38      	adds	r0, r7, #4
 8000768:	9201      	str	r2, [sp, #4]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	460b      	mov	r3, r1
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <main+0x78>)
 8000770:	2132      	movs	r1, #50	@ 0x32
 8000772:	f000 f869 	bl	8000848 <sniprintf>
				 currentTime.hour, currentTime.min, currentTime.seconds);
		UART6_TxString(buffer);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ffb1 	bl	80006e0 <UART6_TxString>
    {
 800077e:	bf00      	nop
 8000780:	e7e9      	b.n	8000756 <main+0x4a>
 8000782:	bf00      	nop
 8000784:	080011c4 	.word	0x080011c4

08000788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000790:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <_sbrk+0x5c>)
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <_sbrk+0x60>)
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <_sbrk+0x64>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <_sbrk+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d207      	bcs.n	80007c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b8:	f000 f87a 	bl	80008b0 <__errno>
 80007bc:	4603      	mov	r3, r0
 80007be:	220c      	movs	r2, #12
 80007c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	e009      	b.n	80007dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ce:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <_sbrk+0x64>)
 80007d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20018000 	.word	0x20018000
 80007e8:	00000400 	.word	0x00000400
 80007ec:	2000006c 	.word	0x2000006c
 80007f0:	200001b8 	.word	0x200001b8

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	@ (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	@ (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	@ (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000822:	f000 f84b 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff ff71 	bl	800070c <main>

0800082a <LoopForever>:

LoopForever:
  b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000838:	08001220 	.word	0x08001220
  ldr r2, =_sbss
 800083c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000840:	200001b8 	.word	0x200001b8

08000844 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC_IRQHandler>
	...

08000848 <sniprintf>:
 8000848:	b40c      	push	{r2, r3}
 800084a:	b530      	push	{r4, r5, lr}
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <sniprintf+0x64>)
 800084e:	1e0c      	subs	r4, r1, #0
 8000850:	681d      	ldr	r5, [r3, #0]
 8000852:	b09d      	sub	sp, #116	@ 0x74
 8000854:	da08      	bge.n	8000868 <sniprintf+0x20>
 8000856:	238b      	movs	r3, #139	@ 0x8b
 8000858:	602b      	str	r3, [r5, #0]
 800085a:	f04f 30ff 	mov.w	r0, #4294967295
 800085e:	b01d      	add	sp, #116	@ 0x74
 8000860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000864:	b002      	add	sp, #8
 8000866:	4770      	bx	lr
 8000868:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800086c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000870:	bf14      	ite	ne
 8000872:	f104 33ff 	addne.w	r3, r4, #4294967295
 8000876:	4623      	moveq	r3, r4
 8000878:	9304      	str	r3, [sp, #16]
 800087a:	9307      	str	r3, [sp, #28]
 800087c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000880:	9002      	str	r0, [sp, #8]
 8000882:	9006      	str	r0, [sp, #24]
 8000884:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000888:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800088a:	ab21      	add	r3, sp, #132	@ 0x84
 800088c:	a902      	add	r1, sp, #8
 800088e:	4628      	mov	r0, r5
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	f000 f98d 	bl	8000bb0 <_svfiprintf_r>
 8000896:	1c43      	adds	r3, r0, #1
 8000898:	bfbc      	itt	lt
 800089a:	238b      	movlt	r3, #139	@ 0x8b
 800089c:	602b      	strlt	r3, [r5, #0]
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d0dd      	beq.n	800085e <sniprintf+0x16>
 80008a2:	9b02      	ldr	r3, [sp, #8]
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e7d9      	b.n	800085e <sniprintf+0x16>
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000

080008b0 <__errno>:
 80008b0:	4b01      	ldr	r3, [pc, #4]	@ (80008b8 <__errno+0x8>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000000 	.word	0x20000000

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4d0d      	ldr	r5, [pc, #52]	@ (80008f4 <__libc_init_array+0x38>)
 80008c0:	4c0d      	ldr	r4, [pc, #52]	@ (80008f8 <__libc_init_array+0x3c>)
 80008c2:	1b64      	subs	r4, r4, r5
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	2600      	movs	r6, #0
 80008c8:	42a6      	cmp	r6, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	4d0b      	ldr	r5, [pc, #44]	@ (80008fc <__libc_init_array+0x40>)
 80008ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000900 <__libc_init_array+0x44>)
 80008d0:	f000 fc66 	bl	80011a0 <_init>
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	2600      	movs	r6, #0
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e4:	4798      	blx	r3
 80008e6:	3601      	adds	r6, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ee:	4798      	blx	r3
 80008f0:	3601      	adds	r6, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	08001218 	.word	0x08001218
 80008f8:	08001218 	.word	0x08001218
 80008fc:	08001218 	.word	0x08001218
 8000900:	0800121c 	.word	0x0800121c

08000904 <__retarget_lock_acquire_recursive>:
 8000904:	4770      	bx	lr

08000906 <__retarget_lock_release_recursive>:
 8000906:	4770      	bx	lr

08000908 <_free_r>:
 8000908:	b538      	push	{r3, r4, r5, lr}
 800090a:	4605      	mov	r5, r0
 800090c:	2900      	cmp	r1, #0
 800090e:	d041      	beq.n	8000994 <_free_r+0x8c>
 8000910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000914:	1f0c      	subs	r4, r1, #4
 8000916:	2b00      	cmp	r3, #0
 8000918:	bfb8      	it	lt
 800091a:	18e4      	addlt	r4, r4, r3
 800091c:	f000 f8e0 	bl	8000ae0 <__malloc_lock>
 8000920:	4a1d      	ldr	r2, [pc, #116]	@ (8000998 <_free_r+0x90>)
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	b933      	cbnz	r3, 8000934 <_free_r+0x2c>
 8000926:	6063      	str	r3, [r4, #4]
 8000928:	6014      	str	r4, [r2, #0]
 800092a:	4628      	mov	r0, r5
 800092c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000930:	f000 b8dc 	b.w	8000aec <__malloc_unlock>
 8000934:	42a3      	cmp	r3, r4
 8000936:	d908      	bls.n	800094a <_free_r+0x42>
 8000938:	6820      	ldr	r0, [r4, #0]
 800093a:	1821      	adds	r1, r4, r0
 800093c:	428b      	cmp	r3, r1
 800093e:	bf01      	itttt	eq
 8000940:	6819      	ldreq	r1, [r3, #0]
 8000942:	685b      	ldreq	r3, [r3, #4]
 8000944:	1809      	addeq	r1, r1, r0
 8000946:	6021      	streq	r1, [r4, #0]
 8000948:	e7ed      	b.n	8000926 <_free_r+0x1e>
 800094a:	461a      	mov	r2, r3
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	b10b      	cbz	r3, 8000954 <_free_r+0x4c>
 8000950:	42a3      	cmp	r3, r4
 8000952:	d9fa      	bls.n	800094a <_free_r+0x42>
 8000954:	6811      	ldr	r1, [r2, #0]
 8000956:	1850      	adds	r0, r2, r1
 8000958:	42a0      	cmp	r0, r4
 800095a:	d10b      	bne.n	8000974 <_free_r+0x6c>
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	4401      	add	r1, r0
 8000960:	1850      	adds	r0, r2, r1
 8000962:	4283      	cmp	r3, r0
 8000964:	6011      	str	r1, [r2, #0]
 8000966:	d1e0      	bne.n	800092a <_free_r+0x22>
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	6053      	str	r3, [r2, #4]
 800096e:	4408      	add	r0, r1
 8000970:	6010      	str	r0, [r2, #0]
 8000972:	e7da      	b.n	800092a <_free_r+0x22>
 8000974:	d902      	bls.n	800097c <_free_r+0x74>
 8000976:	230c      	movs	r3, #12
 8000978:	602b      	str	r3, [r5, #0]
 800097a:	e7d6      	b.n	800092a <_free_r+0x22>
 800097c:	6820      	ldr	r0, [r4, #0]
 800097e:	1821      	adds	r1, r4, r0
 8000980:	428b      	cmp	r3, r1
 8000982:	bf04      	itt	eq
 8000984:	6819      	ldreq	r1, [r3, #0]
 8000986:	685b      	ldreq	r3, [r3, #4]
 8000988:	6063      	str	r3, [r4, #4]
 800098a:	bf04      	itt	eq
 800098c:	1809      	addeq	r1, r1, r0
 800098e:	6021      	streq	r1, [r4, #0]
 8000990:	6054      	str	r4, [r2, #4]
 8000992:	e7ca      	b.n	800092a <_free_r+0x22>
 8000994:	bd38      	pop	{r3, r4, r5, pc}
 8000996:	bf00      	nop
 8000998:	200001b4 	.word	0x200001b4

0800099c <sbrk_aligned>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	4e0f      	ldr	r6, [pc, #60]	@ (80009dc <sbrk_aligned+0x40>)
 80009a0:	460c      	mov	r4, r1
 80009a2:	6831      	ldr	r1, [r6, #0]
 80009a4:	4605      	mov	r5, r0
 80009a6:	b911      	cbnz	r1, 80009ae <sbrk_aligned+0x12>
 80009a8:	f000 fba6 	bl	80010f8 <_sbrk_r>
 80009ac:	6030      	str	r0, [r6, #0]
 80009ae:	4621      	mov	r1, r4
 80009b0:	4628      	mov	r0, r5
 80009b2:	f000 fba1 	bl	80010f8 <_sbrk_r>
 80009b6:	1c43      	adds	r3, r0, #1
 80009b8:	d103      	bne.n	80009c2 <sbrk_aligned+0x26>
 80009ba:	f04f 34ff 	mov.w	r4, #4294967295
 80009be:	4620      	mov	r0, r4
 80009c0:	bd70      	pop	{r4, r5, r6, pc}
 80009c2:	1cc4      	adds	r4, r0, #3
 80009c4:	f024 0403 	bic.w	r4, r4, #3
 80009c8:	42a0      	cmp	r0, r4
 80009ca:	d0f8      	beq.n	80009be <sbrk_aligned+0x22>
 80009cc:	1a21      	subs	r1, r4, r0
 80009ce:	4628      	mov	r0, r5
 80009d0:	f000 fb92 	bl	80010f8 <_sbrk_r>
 80009d4:	3001      	adds	r0, #1
 80009d6:	d1f2      	bne.n	80009be <sbrk_aligned+0x22>
 80009d8:	e7ef      	b.n	80009ba <sbrk_aligned+0x1e>
 80009da:	bf00      	nop
 80009dc:	200001b0 	.word	0x200001b0

080009e0 <_malloc_r>:
 80009e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e4:	1ccd      	adds	r5, r1, #3
 80009e6:	f025 0503 	bic.w	r5, r5, #3
 80009ea:	3508      	adds	r5, #8
 80009ec:	2d0c      	cmp	r5, #12
 80009ee:	bf38      	it	cc
 80009f0:	250c      	movcc	r5, #12
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	4606      	mov	r6, r0
 80009f6:	db01      	blt.n	80009fc <_malloc_r+0x1c>
 80009f8:	42a9      	cmp	r1, r5
 80009fa:	d904      	bls.n	8000a06 <_malloc_r+0x26>
 80009fc:	230c      	movs	r3, #12
 80009fe:	6033      	str	r3, [r6, #0]
 8000a00:	2000      	movs	r0, #0
 8000a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000adc <_malloc_r+0xfc>
 8000a0a:	f000 f869 	bl	8000ae0 <__malloc_lock>
 8000a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a12:	461c      	mov	r4, r3
 8000a14:	bb44      	cbnz	r4, 8000a68 <_malloc_r+0x88>
 8000a16:	4629      	mov	r1, r5
 8000a18:	4630      	mov	r0, r6
 8000a1a:	f7ff ffbf 	bl	800099c <sbrk_aligned>
 8000a1e:	1c43      	adds	r3, r0, #1
 8000a20:	4604      	mov	r4, r0
 8000a22:	d158      	bne.n	8000ad6 <_malloc_r+0xf6>
 8000a24:	f8d8 4000 	ldr.w	r4, [r8]
 8000a28:	4627      	mov	r7, r4
 8000a2a:	2f00      	cmp	r7, #0
 8000a2c:	d143      	bne.n	8000ab6 <_malloc_r+0xd6>
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d04b      	beq.n	8000aca <_malloc_r+0xea>
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	4639      	mov	r1, r7
 8000a36:	4630      	mov	r0, r6
 8000a38:	eb04 0903 	add.w	r9, r4, r3
 8000a3c:	f000 fb5c 	bl	80010f8 <_sbrk_r>
 8000a40:	4581      	cmp	r9, r0
 8000a42:	d142      	bne.n	8000aca <_malloc_r+0xea>
 8000a44:	6821      	ldr	r1, [r4, #0]
 8000a46:	1a6d      	subs	r5, r5, r1
 8000a48:	4629      	mov	r1, r5
 8000a4a:	4630      	mov	r0, r6
 8000a4c:	f7ff ffa6 	bl	800099c <sbrk_aligned>
 8000a50:	3001      	adds	r0, #1
 8000a52:	d03a      	beq.n	8000aca <_malloc_r+0xea>
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	442b      	add	r3, r5
 8000a58:	6023      	str	r3, [r4, #0]
 8000a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	bb62      	cbnz	r2, 8000abc <_malloc_r+0xdc>
 8000a62:	f8c8 7000 	str.w	r7, [r8]
 8000a66:	e00f      	b.n	8000a88 <_malloc_r+0xa8>
 8000a68:	6822      	ldr	r2, [r4, #0]
 8000a6a:	1b52      	subs	r2, r2, r5
 8000a6c:	d420      	bmi.n	8000ab0 <_malloc_r+0xd0>
 8000a6e:	2a0b      	cmp	r2, #11
 8000a70:	d917      	bls.n	8000aa2 <_malloc_r+0xc2>
 8000a72:	1961      	adds	r1, r4, r5
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	6025      	str	r5, [r4, #0]
 8000a78:	bf18      	it	ne
 8000a7a:	6059      	strne	r1, [r3, #4]
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	bf08      	it	eq
 8000a80:	f8c8 1000 	streq.w	r1, [r8]
 8000a84:	5162      	str	r2, [r4, r5]
 8000a86:	604b      	str	r3, [r1, #4]
 8000a88:	4630      	mov	r0, r6
 8000a8a:	f000 f82f 	bl	8000aec <__malloc_unlock>
 8000a8e:	f104 000b 	add.w	r0, r4, #11
 8000a92:	1d23      	adds	r3, r4, #4
 8000a94:	f020 0007 	bic.w	r0, r0, #7
 8000a98:	1ac2      	subs	r2, r0, r3
 8000a9a:	bf1c      	itt	ne
 8000a9c:	1a1b      	subne	r3, r3, r0
 8000a9e:	50a3      	strne	r3, [r4, r2]
 8000aa0:	e7af      	b.n	8000a02 <_malloc_r+0x22>
 8000aa2:	6862      	ldr	r2, [r4, #4]
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	bf0c      	ite	eq
 8000aa8:	f8c8 2000 	streq.w	r2, [r8]
 8000aac:	605a      	strne	r2, [r3, #4]
 8000aae:	e7eb      	b.n	8000a88 <_malloc_r+0xa8>
 8000ab0:	4623      	mov	r3, r4
 8000ab2:	6864      	ldr	r4, [r4, #4]
 8000ab4:	e7ae      	b.n	8000a14 <_malloc_r+0x34>
 8000ab6:	463c      	mov	r4, r7
 8000ab8:	687f      	ldr	r7, [r7, #4]
 8000aba:	e7b6      	b.n	8000a2a <_malloc_r+0x4a>
 8000abc:	461a      	mov	r2, r3
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	d1fb      	bne.n	8000abc <_malloc_r+0xdc>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	6053      	str	r3, [r2, #4]
 8000ac8:	e7de      	b.n	8000a88 <_malloc_r+0xa8>
 8000aca:	230c      	movs	r3, #12
 8000acc:	6033      	str	r3, [r6, #0]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	f000 f80c 	bl	8000aec <__malloc_unlock>
 8000ad4:	e794      	b.n	8000a00 <_malloc_r+0x20>
 8000ad6:	6005      	str	r5, [r0, #0]
 8000ad8:	e7d6      	b.n	8000a88 <_malloc_r+0xa8>
 8000ada:	bf00      	nop
 8000adc:	200001b4 	.word	0x200001b4

08000ae0 <__malloc_lock>:
 8000ae0:	4801      	ldr	r0, [pc, #4]	@ (8000ae8 <__malloc_lock+0x8>)
 8000ae2:	f7ff bf0f 	b.w	8000904 <__retarget_lock_acquire_recursive>
 8000ae6:	bf00      	nop
 8000ae8:	200001ac 	.word	0x200001ac

08000aec <__malloc_unlock>:
 8000aec:	4801      	ldr	r0, [pc, #4]	@ (8000af4 <__malloc_unlock+0x8>)
 8000aee:	f7ff bf0a 	b.w	8000906 <__retarget_lock_release_recursive>
 8000af2:	bf00      	nop
 8000af4:	200001ac 	.word	0x200001ac

08000af8 <__ssputs_r>:
 8000af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000afc:	688e      	ldr	r6, [r1, #8]
 8000afe:	461f      	mov	r7, r3
 8000b00:	42be      	cmp	r6, r7
 8000b02:	680b      	ldr	r3, [r1, #0]
 8000b04:	4682      	mov	sl, r0
 8000b06:	460c      	mov	r4, r1
 8000b08:	4690      	mov	r8, r2
 8000b0a:	d82d      	bhi.n	8000b68 <__ssputs_r+0x70>
 8000b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000b14:	d026      	beq.n	8000b64 <__ssputs_r+0x6c>
 8000b16:	6965      	ldr	r5, [r4, #20]
 8000b18:	6909      	ldr	r1, [r1, #16]
 8000b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b1e:	eba3 0901 	sub.w	r9, r3, r1
 8000b22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b26:	1c7b      	adds	r3, r7, #1
 8000b28:	444b      	add	r3, r9
 8000b2a:	106d      	asrs	r5, r5, #1
 8000b2c:	429d      	cmp	r5, r3
 8000b2e:	bf38      	it	cc
 8000b30:	461d      	movcc	r5, r3
 8000b32:	0553      	lsls	r3, r2, #21
 8000b34:	d527      	bpl.n	8000b86 <__ssputs_r+0x8e>
 8000b36:	4629      	mov	r1, r5
 8000b38:	f7ff ff52 	bl	80009e0 <_malloc_r>
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	b360      	cbz	r0, 8000b9a <__ssputs_r+0xa2>
 8000b40:	6921      	ldr	r1, [r4, #16]
 8000b42:	464a      	mov	r2, r9
 8000b44:	f000 fae8 	bl	8001118 <memcpy>
 8000b48:	89a3      	ldrh	r3, [r4, #12]
 8000b4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b52:	81a3      	strh	r3, [r4, #12]
 8000b54:	6126      	str	r6, [r4, #16]
 8000b56:	6165      	str	r5, [r4, #20]
 8000b58:	444e      	add	r6, r9
 8000b5a:	eba5 0509 	sub.w	r5, r5, r9
 8000b5e:	6026      	str	r6, [r4, #0]
 8000b60:	60a5      	str	r5, [r4, #8]
 8000b62:	463e      	mov	r6, r7
 8000b64:	42be      	cmp	r6, r7
 8000b66:	d900      	bls.n	8000b6a <__ssputs_r+0x72>
 8000b68:	463e      	mov	r6, r7
 8000b6a:	6820      	ldr	r0, [r4, #0]
 8000b6c:	4632      	mov	r2, r6
 8000b6e:	4641      	mov	r1, r8
 8000b70:	f000 faa8 	bl	80010c4 <memmove>
 8000b74:	68a3      	ldr	r3, [r4, #8]
 8000b76:	1b9b      	subs	r3, r3, r6
 8000b78:	60a3      	str	r3, [r4, #8]
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	4433      	add	r3, r6
 8000b7e:	6023      	str	r3, [r4, #0]
 8000b80:	2000      	movs	r0, #0
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	462a      	mov	r2, r5
 8000b88:	f000 fad4 	bl	8001134 <_realloc_r>
 8000b8c:	4606      	mov	r6, r0
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d1e0      	bne.n	8000b54 <__ssputs_r+0x5c>
 8000b92:	6921      	ldr	r1, [r4, #16]
 8000b94:	4650      	mov	r0, sl
 8000b96:	f7ff feb7 	bl	8000908 <_free_r>
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	f8ca 3000 	str.w	r3, [sl]
 8000ba0:	89a3      	ldrh	r3, [r4, #12]
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba6:	81a3      	strh	r3, [r4, #12]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	e7e9      	b.n	8000b82 <__ssputs_r+0x8a>
	...

08000bb0 <_svfiprintf_r>:
 8000bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	898b      	ldrh	r3, [r1, #12]
 8000bb8:	061b      	lsls	r3, r3, #24
 8000bba:	b09d      	sub	sp, #116	@ 0x74
 8000bbc:	4607      	mov	r7, r0
 8000bbe:	460d      	mov	r5, r1
 8000bc0:	4614      	mov	r4, r2
 8000bc2:	d510      	bpl.n	8000be6 <_svfiprintf_r+0x36>
 8000bc4:	690b      	ldr	r3, [r1, #16]
 8000bc6:	b973      	cbnz	r3, 8000be6 <_svfiprintf_r+0x36>
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	f7ff ff09 	bl	80009e0 <_malloc_r>
 8000bce:	6028      	str	r0, [r5, #0]
 8000bd0:	6128      	str	r0, [r5, #16]
 8000bd2:	b930      	cbnz	r0, 8000be2 <_svfiprintf_r+0x32>
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	b01d      	add	sp, #116	@ 0x74
 8000bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000be2:	2340      	movs	r3, #64	@ 0x40
 8000be4:	616b      	str	r3, [r5, #20]
 8000be6:	2300      	movs	r3, #0
 8000be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bea:	2320      	movs	r3, #32
 8000bec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bf4:	2330      	movs	r3, #48	@ 0x30
 8000bf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000d94 <_svfiprintf_r+0x1e4>
 8000bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000bfe:	f04f 0901 	mov.w	r9, #1
 8000c02:	4623      	mov	r3, r4
 8000c04:	469a      	mov	sl, r3
 8000c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c0a:	b10a      	cbz	r2, 8000c10 <_svfiprintf_r+0x60>
 8000c0c:	2a25      	cmp	r2, #37	@ 0x25
 8000c0e:	d1f9      	bne.n	8000c04 <_svfiprintf_r+0x54>
 8000c10:	ebba 0b04 	subs.w	fp, sl, r4
 8000c14:	d00b      	beq.n	8000c2e <_svfiprintf_r+0x7e>
 8000c16:	465b      	mov	r3, fp
 8000c18:	4622      	mov	r2, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f7ff ff6b 	bl	8000af8 <__ssputs_r>
 8000c22:	3001      	adds	r0, #1
 8000c24:	f000 80a7 	beq.w	8000d76 <_svfiprintf_r+0x1c6>
 8000c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c2a:	445a      	add	r2, fp
 8000c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 809f 	beq.w	8000d76 <_svfiprintf_r+0x1c6>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c42:	f10a 0a01 	add.w	sl, sl, #1
 8000c46:	9304      	str	r3, [sp, #16]
 8000c48:	9307      	str	r3, [sp, #28]
 8000c4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c50:	4654      	mov	r4, sl
 8000c52:	2205      	movs	r2, #5
 8000c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c58:	484e      	ldr	r0, [pc, #312]	@ (8000d94 <_svfiprintf_r+0x1e4>)
 8000c5a:	f7ff fac1 	bl	80001e0 <memchr>
 8000c5e:	9a04      	ldr	r2, [sp, #16]
 8000c60:	b9d8      	cbnz	r0, 8000c9a <_svfiprintf_r+0xea>
 8000c62:	06d0      	lsls	r0, r2, #27
 8000c64:	bf44      	itt	mi
 8000c66:	2320      	movmi	r3, #32
 8000c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c6c:	0711      	lsls	r1, r2, #28
 8000c6e:	bf44      	itt	mi
 8000c70:	232b      	movmi	r3, #43	@ 0x2b
 8000c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c76:	f89a 3000 	ldrb.w	r3, [sl]
 8000c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c7c:	d015      	beq.n	8000caa <_svfiprintf_r+0xfa>
 8000c7e:	9a07      	ldr	r2, [sp, #28]
 8000c80:	4654      	mov	r4, sl
 8000c82:	2000      	movs	r0, #0
 8000c84:	f04f 0c0a 	mov.w	ip, #10
 8000c88:	4621      	mov	r1, r4
 8000c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c8e:	3b30      	subs	r3, #48	@ 0x30
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	d94b      	bls.n	8000d2c <_svfiprintf_r+0x17c>
 8000c94:	b1b0      	cbz	r0, 8000cc4 <_svfiprintf_r+0x114>
 8000c96:	9207      	str	r2, [sp, #28]
 8000c98:	e014      	b.n	8000cc4 <_svfiprintf_r+0x114>
 8000c9a:	eba0 0308 	sub.w	r3, r0, r8
 8000c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	9304      	str	r3, [sp, #16]
 8000ca6:	46a2      	mov	sl, r4
 8000ca8:	e7d2      	b.n	8000c50 <_svfiprintf_r+0xa0>
 8000caa:	9b03      	ldr	r3, [sp, #12]
 8000cac:	1d19      	adds	r1, r3, #4
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	9103      	str	r1, [sp, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bfbb      	ittet	lt
 8000cb6:	425b      	neglt	r3, r3
 8000cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8000cbc:	9307      	strge	r3, [sp, #28]
 8000cbe:	9307      	strlt	r3, [sp, #28]
 8000cc0:	bfb8      	it	lt
 8000cc2:	9204      	strlt	r2, [sp, #16]
 8000cc4:	7823      	ldrb	r3, [r4, #0]
 8000cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cc8:	d10a      	bne.n	8000ce0 <_svfiprintf_r+0x130>
 8000cca:	7863      	ldrb	r3, [r4, #1]
 8000ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cce:	d132      	bne.n	8000d36 <_svfiprintf_r+0x186>
 8000cd0:	9b03      	ldr	r3, [sp, #12]
 8000cd2:	1d1a      	adds	r2, r3, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	9203      	str	r2, [sp, #12]
 8000cd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000cdc:	3402      	adds	r4, #2
 8000cde:	9305      	str	r3, [sp, #20]
 8000ce0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000da4 <_svfiprintf_r+0x1f4>
 8000ce4:	7821      	ldrb	r1, [r4, #0]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4650      	mov	r0, sl
 8000cea:	f7ff fa79 	bl	80001e0 <memchr>
 8000cee:	b138      	cbz	r0, 8000d00 <_svfiprintf_r+0x150>
 8000cf0:	9b04      	ldr	r3, [sp, #16]
 8000cf2:	eba0 000a 	sub.w	r0, r0, sl
 8000cf6:	2240      	movs	r2, #64	@ 0x40
 8000cf8:	4082      	lsls	r2, r0
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	3401      	adds	r4, #1
 8000cfe:	9304      	str	r3, [sp, #16]
 8000d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d04:	4824      	ldr	r0, [pc, #144]	@ (8000d98 <_svfiprintf_r+0x1e8>)
 8000d06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d0a:	2206      	movs	r2, #6
 8000d0c:	f7ff fa68 	bl	80001e0 <memchr>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d036      	beq.n	8000d82 <_svfiprintf_r+0x1d2>
 8000d14:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <_svfiprintf_r+0x1ec>)
 8000d16:	bb1b      	cbnz	r3, 8000d60 <_svfiprintf_r+0x1b0>
 8000d18:	9b03      	ldr	r3, [sp, #12]
 8000d1a:	3307      	adds	r3, #7
 8000d1c:	f023 0307 	bic.w	r3, r3, #7
 8000d20:	3308      	adds	r3, #8
 8000d22:	9303      	str	r3, [sp, #12]
 8000d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d26:	4433      	add	r3, r6
 8000d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d2a:	e76a      	b.n	8000c02 <_svfiprintf_r+0x52>
 8000d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d30:	460c      	mov	r4, r1
 8000d32:	2001      	movs	r0, #1
 8000d34:	e7a8      	b.n	8000c88 <_svfiprintf_r+0xd8>
 8000d36:	2300      	movs	r3, #0
 8000d38:	3401      	adds	r4, #1
 8000d3a:	9305      	str	r3, [sp, #20]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 0c0a 	mov.w	ip, #10
 8000d42:	4620      	mov	r0, r4
 8000d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d48:	3a30      	subs	r2, #48	@ 0x30
 8000d4a:	2a09      	cmp	r2, #9
 8000d4c:	d903      	bls.n	8000d56 <_svfiprintf_r+0x1a6>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0c6      	beq.n	8000ce0 <_svfiprintf_r+0x130>
 8000d52:	9105      	str	r1, [sp, #20]
 8000d54:	e7c4      	b.n	8000ce0 <_svfiprintf_r+0x130>
 8000d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e7f0      	b.n	8000d42 <_svfiprintf_r+0x192>
 8000d60:	ab03      	add	r3, sp, #12
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	462a      	mov	r2, r5
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <_svfiprintf_r+0x1f0>)
 8000d68:	a904      	add	r1, sp, #16
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	f3af 8000 	nop.w
 8000d70:	1c42      	adds	r2, r0, #1
 8000d72:	4606      	mov	r6, r0
 8000d74:	d1d6      	bne.n	8000d24 <_svfiprintf_r+0x174>
 8000d76:	89ab      	ldrh	r3, [r5, #12]
 8000d78:	065b      	lsls	r3, r3, #25
 8000d7a:	f53f af2d 	bmi.w	8000bd8 <_svfiprintf_r+0x28>
 8000d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d80:	e72c      	b.n	8000bdc <_svfiprintf_r+0x2c>
 8000d82:	ab03      	add	r3, sp, #12
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	462a      	mov	r2, r5
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <_svfiprintf_r+0x1f0>)
 8000d8a:	a904      	add	r1, sp, #16
 8000d8c:	4638      	mov	r0, r7
 8000d8e:	f000 f879 	bl	8000e84 <_printf_i>
 8000d92:	e7ed      	b.n	8000d70 <_svfiprintf_r+0x1c0>
 8000d94:	080011db 	.word	0x080011db
 8000d98:	080011e5 	.word	0x080011e5
 8000d9c:	00000000 	.word	0x00000000
 8000da0:	08000af9 	.word	0x08000af9
 8000da4:	080011e1 	.word	0x080011e1

08000da8 <_printf_common>:
 8000da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dac:	4616      	mov	r6, r2
 8000dae:	4698      	mov	r8, r3
 8000db0:	688a      	ldr	r2, [r1, #8]
 8000db2:	690b      	ldr	r3, [r1, #16]
 8000db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000db8:	4293      	cmp	r3, r2
 8000dba:	bfb8      	it	lt
 8000dbc:	4613      	movlt	r3, r2
 8000dbe:	6033      	str	r3, [r6, #0]
 8000dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dc4:	4607      	mov	r7, r0
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	b10a      	cbz	r2, 8000dce <_printf_common+0x26>
 8000dca:	3301      	adds	r3, #1
 8000dcc:	6033      	str	r3, [r6, #0]
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	0699      	lsls	r1, r3, #26
 8000dd2:	bf42      	ittt	mi
 8000dd4:	6833      	ldrmi	r3, [r6, #0]
 8000dd6:	3302      	addmi	r3, #2
 8000dd8:	6033      	strmi	r3, [r6, #0]
 8000dda:	6825      	ldr	r5, [r4, #0]
 8000ddc:	f015 0506 	ands.w	r5, r5, #6
 8000de0:	d106      	bne.n	8000df0 <_printf_common+0x48>
 8000de2:	f104 0a19 	add.w	sl, r4, #25
 8000de6:	68e3      	ldr	r3, [r4, #12]
 8000de8:	6832      	ldr	r2, [r6, #0]
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	dc26      	bgt.n	8000e3e <_printf_common+0x96>
 8000df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000df4:	6822      	ldr	r2, [r4, #0]
 8000df6:	3b00      	subs	r3, #0
 8000df8:	bf18      	it	ne
 8000dfa:	2301      	movne	r3, #1
 8000dfc:	0692      	lsls	r2, r2, #26
 8000dfe:	d42b      	bmi.n	8000e58 <_printf_common+0xb0>
 8000e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e04:	4641      	mov	r1, r8
 8000e06:	4638      	mov	r0, r7
 8000e08:	47c8      	blx	r9
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	d01e      	beq.n	8000e4c <_printf_common+0xa4>
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	6922      	ldr	r2, [r4, #16]
 8000e12:	f003 0306 	and.w	r3, r3, #6
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf02      	ittt	eq
 8000e1a:	68e5      	ldreq	r5, [r4, #12]
 8000e1c:	6833      	ldreq	r3, [r6, #0]
 8000e1e:	1aed      	subeq	r5, r5, r3
 8000e20:	68a3      	ldr	r3, [r4, #8]
 8000e22:	bf0c      	ite	eq
 8000e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e28:	2500      	movne	r5, #0
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	bfc4      	itt	gt
 8000e2e:	1a9b      	subgt	r3, r3, r2
 8000e30:	18ed      	addgt	r5, r5, r3
 8000e32:	2600      	movs	r6, #0
 8000e34:	341a      	adds	r4, #26
 8000e36:	42b5      	cmp	r5, r6
 8000e38:	d11a      	bne.n	8000e70 <_printf_common+0xc8>
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	e008      	b.n	8000e50 <_printf_common+0xa8>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4652      	mov	r2, sl
 8000e42:	4641      	mov	r1, r8
 8000e44:	4638      	mov	r0, r7
 8000e46:	47c8      	blx	r9
 8000e48:	3001      	adds	r0, #1
 8000e4a:	d103      	bne.n	8000e54 <_printf_common+0xac>
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	3501      	adds	r5, #1
 8000e56:	e7c6      	b.n	8000de6 <_printf_common+0x3e>
 8000e58:	18e1      	adds	r1, r4, r3
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	2030      	movs	r0, #48	@ 0x30
 8000e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e62:	4422      	add	r2, r4
 8000e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	e7c7      	b.n	8000e00 <_printf_common+0x58>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4622      	mov	r2, r4
 8000e74:	4641      	mov	r1, r8
 8000e76:	4638      	mov	r0, r7
 8000e78:	47c8      	blx	r9
 8000e7a:	3001      	adds	r0, #1
 8000e7c:	d0e6      	beq.n	8000e4c <_printf_common+0xa4>
 8000e7e:	3601      	adds	r6, #1
 8000e80:	e7d9      	b.n	8000e36 <_printf_common+0x8e>
	...

08000e84 <_printf_i>:
 8000e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e88:	7e0f      	ldrb	r7, [r1, #24]
 8000e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e8c:	2f78      	cmp	r7, #120	@ 0x78
 8000e8e:	4691      	mov	r9, r2
 8000e90:	4680      	mov	r8, r0
 8000e92:	460c      	mov	r4, r1
 8000e94:	469a      	mov	sl, r3
 8000e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e9a:	d807      	bhi.n	8000eac <_printf_i+0x28>
 8000e9c:	2f62      	cmp	r7, #98	@ 0x62
 8000e9e:	d80a      	bhi.n	8000eb6 <_printf_i+0x32>
 8000ea0:	2f00      	cmp	r7, #0
 8000ea2:	f000 80d2 	beq.w	800104a <_printf_i+0x1c6>
 8000ea6:	2f58      	cmp	r7, #88	@ 0x58
 8000ea8:	f000 80b9 	beq.w	800101e <_printf_i+0x19a>
 8000eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000eb4:	e03a      	b.n	8000f2c <_printf_i+0xa8>
 8000eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000eba:	2b15      	cmp	r3, #21
 8000ebc:	d8f6      	bhi.n	8000eac <_printf_i+0x28>
 8000ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8000ec4 <_printf_i+0x40>)
 8000ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ec4:	08000f1d 	.word	0x08000f1d
 8000ec8:	08000f31 	.word	0x08000f31
 8000ecc:	08000ead 	.word	0x08000ead
 8000ed0:	08000ead 	.word	0x08000ead
 8000ed4:	08000ead 	.word	0x08000ead
 8000ed8:	08000ead 	.word	0x08000ead
 8000edc:	08000f31 	.word	0x08000f31
 8000ee0:	08000ead 	.word	0x08000ead
 8000ee4:	08000ead 	.word	0x08000ead
 8000ee8:	08000ead 	.word	0x08000ead
 8000eec:	08000ead 	.word	0x08000ead
 8000ef0:	08001031 	.word	0x08001031
 8000ef4:	08000f5b 	.word	0x08000f5b
 8000ef8:	08000feb 	.word	0x08000feb
 8000efc:	08000ead 	.word	0x08000ead
 8000f00:	08000ead 	.word	0x08000ead
 8000f04:	08001053 	.word	0x08001053
 8000f08:	08000ead 	.word	0x08000ead
 8000f0c:	08000f5b 	.word	0x08000f5b
 8000f10:	08000ead 	.word	0x08000ead
 8000f14:	08000ead 	.word	0x08000ead
 8000f18:	08000ff3 	.word	0x08000ff3
 8000f1c:	6833      	ldr	r3, [r6, #0]
 8000f1e:	1d1a      	adds	r2, r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6032      	str	r2, [r6, #0]
 8000f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e09d      	b.n	800106c <_printf_i+0x1e8>
 8000f30:	6833      	ldr	r3, [r6, #0]
 8000f32:	6820      	ldr	r0, [r4, #0]
 8000f34:	1d19      	adds	r1, r3, #4
 8000f36:	6031      	str	r1, [r6, #0]
 8000f38:	0606      	lsls	r6, r0, #24
 8000f3a:	d501      	bpl.n	8000f40 <_printf_i+0xbc>
 8000f3c:	681d      	ldr	r5, [r3, #0]
 8000f3e:	e003      	b.n	8000f48 <_printf_i+0xc4>
 8000f40:	0645      	lsls	r5, r0, #25
 8000f42:	d5fb      	bpl.n	8000f3c <_printf_i+0xb8>
 8000f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	da03      	bge.n	8000f54 <_printf_i+0xd0>
 8000f4c:	232d      	movs	r3, #45	@ 0x2d
 8000f4e:	426d      	negs	r5, r5
 8000f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f54:	4859      	ldr	r0, [pc, #356]	@ (80010bc <_printf_i+0x238>)
 8000f56:	230a      	movs	r3, #10
 8000f58:	e011      	b.n	8000f7e <_printf_i+0xfa>
 8000f5a:	6821      	ldr	r1, [r4, #0]
 8000f5c:	6833      	ldr	r3, [r6, #0]
 8000f5e:	0608      	lsls	r0, r1, #24
 8000f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f64:	d402      	bmi.n	8000f6c <_printf_i+0xe8>
 8000f66:	0649      	lsls	r1, r1, #25
 8000f68:	bf48      	it	mi
 8000f6a:	b2ad      	uxthmi	r5, r5
 8000f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f6e:	4853      	ldr	r0, [pc, #332]	@ (80010bc <_printf_i+0x238>)
 8000f70:	6033      	str	r3, [r6, #0]
 8000f72:	bf14      	ite	ne
 8000f74:	230a      	movne	r3, #10
 8000f76:	2308      	moveq	r3, #8
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f7e:	6866      	ldr	r6, [r4, #4]
 8000f80:	60a6      	str	r6, [r4, #8]
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	bfa2      	ittt	ge
 8000f86:	6821      	ldrge	r1, [r4, #0]
 8000f88:	f021 0104 	bicge.w	r1, r1, #4
 8000f8c:	6021      	strge	r1, [r4, #0]
 8000f8e:	b90d      	cbnz	r5, 8000f94 <_printf_i+0x110>
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d04b      	beq.n	800102c <_printf_i+0x1a8>
 8000f94:	4616      	mov	r6, r2
 8000f96:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f9a:	fb03 5711 	mls	r7, r3, r1, r5
 8000f9e:	5dc7      	ldrb	r7, [r0, r7]
 8000fa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fa4:	462f      	mov	r7, r5
 8000fa6:	42bb      	cmp	r3, r7
 8000fa8:	460d      	mov	r5, r1
 8000faa:	d9f4      	bls.n	8000f96 <_printf_i+0x112>
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d10b      	bne.n	8000fc8 <_printf_i+0x144>
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	07df      	lsls	r7, r3, #31
 8000fb4:	d508      	bpl.n	8000fc8 <_printf_i+0x144>
 8000fb6:	6923      	ldr	r3, [r4, #16]
 8000fb8:	6861      	ldr	r1, [r4, #4]
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	bfde      	ittt	le
 8000fbe:	2330      	movle	r3, #48	@ 0x30
 8000fc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000fc8:	1b92      	subs	r2, r2, r6
 8000fca:	6122      	str	r2, [r4, #16]
 8000fcc:	f8cd a000 	str.w	sl, [sp]
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	aa03      	add	r2, sp, #12
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	f7ff fee6 	bl	8000da8 <_printf_common>
 8000fdc:	3001      	adds	r0, #1
 8000fde:	d14a      	bne.n	8001076 <_printf_i+0x1f2>
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	b004      	add	sp, #16
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	6023      	str	r3, [r4, #0]
 8000ff2:	4833      	ldr	r0, [pc, #204]	@ (80010c0 <_printf_i+0x23c>)
 8000ff4:	2778      	movs	r7, #120	@ 0x78
 8000ff6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	6831      	ldr	r1, [r6, #0]
 8000ffe:	061f      	lsls	r7, r3, #24
 8001000:	f851 5b04 	ldr.w	r5, [r1], #4
 8001004:	d402      	bmi.n	800100c <_printf_i+0x188>
 8001006:	065f      	lsls	r7, r3, #25
 8001008:	bf48      	it	mi
 800100a:	b2ad      	uxthmi	r5, r5
 800100c:	6031      	str	r1, [r6, #0]
 800100e:	07d9      	lsls	r1, r3, #31
 8001010:	bf44      	itt	mi
 8001012:	f043 0320 	orrmi.w	r3, r3, #32
 8001016:	6023      	strmi	r3, [r4, #0]
 8001018:	b11d      	cbz	r5, 8001022 <_printf_i+0x19e>
 800101a:	2310      	movs	r3, #16
 800101c:	e7ac      	b.n	8000f78 <_printf_i+0xf4>
 800101e:	4827      	ldr	r0, [pc, #156]	@ (80010bc <_printf_i+0x238>)
 8001020:	e7e9      	b.n	8000ff6 <_printf_i+0x172>
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	f023 0320 	bic.w	r3, r3, #32
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	e7f6      	b.n	800101a <_printf_i+0x196>
 800102c:	4616      	mov	r6, r2
 800102e:	e7bd      	b.n	8000fac <_printf_i+0x128>
 8001030:	6833      	ldr	r3, [r6, #0]
 8001032:	6825      	ldr	r5, [r4, #0]
 8001034:	6961      	ldr	r1, [r4, #20]
 8001036:	1d18      	adds	r0, r3, #4
 8001038:	6030      	str	r0, [r6, #0]
 800103a:	062e      	lsls	r6, r5, #24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	d501      	bpl.n	8001044 <_printf_i+0x1c0>
 8001040:	6019      	str	r1, [r3, #0]
 8001042:	e002      	b.n	800104a <_printf_i+0x1c6>
 8001044:	0668      	lsls	r0, r5, #25
 8001046:	d5fb      	bpl.n	8001040 <_printf_i+0x1bc>
 8001048:	8019      	strh	r1, [r3, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	6123      	str	r3, [r4, #16]
 800104e:	4616      	mov	r6, r2
 8001050:	e7bc      	b.n	8000fcc <_printf_i+0x148>
 8001052:	6833      	ldr	r3, [r6, #0]
 8001054:	1d1a      	adds	r2, r3, #4
 8001056:	6032      	str	r2, [r6, #0]
 8001058:	681e      	ldr	r6, [r3, #0]
 800105a:	6862      	ldr	r2, [r4, #4]
 800105c:	2100      	movs	r1, #0
 800105e:	4630      	mov	r0, r6
 8001060:	f7ff f8be 	bl	80001e0 <memchr>
 8001064:	b108      	cbz	r0, 800106a <_printf_i+0x1e6>
 8001066:	1b80      	subs	r0, r0, r6
 8001068:	6060      	str	r0, [r4, #4]
 800106a:	6863      	ldr	r3, [r4, #4]
 800106c:	6123      	str	r3, [r4, #16]
 800106e:	2300      	movs	r3, #0
 8001070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001074:	e7aa      	b.n	8000fcc <_printf_i+0x148>
 8001076:	6923      	ldr	r3, [r4, #16]
 8001078:	4632      	mov	r2, r6
 800107a:	4649      	mov	r1, r9
 800107c:	4640      	mov	r0, r8
 800107e:	47d0      	blx	sl
 8001080:	3001      	adds	r0, #1
 8001082:	d0ad      	beq.n	8000fe0 <_printf_i+0x15c>
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	079b      	lsls	r3, r3, #30
 8001088:	d413      	bmi.n	80010b2 <_printf_i+0x22e>
 800108a:	68e0      	ldr	r0, [r4, #12]
 800108c:	9b03      	ldr	r3, [sp, #12]
 800108e:	4298      	cmp	r0, r3
 8001090:	bfb8      	it	lt
 8001092:	4618      	movlt	r0, r3
 8001094:	e7a6      	b.n	8000fe4 <_printf_i+0x160>
 8001096:	2301      	movs	r3, #1
 8001098:	4632      	mov	r2, r6
 800109a:	4649      	mov	r1, r9
 800109c:	4640      	mov	r0, r8
 800109e:	47d0      	blx	sl
 80010a0:	3001      	adds	r0, #1
 80010a2:	d09d      	beq.n	8000fe0 <_printf_i+0x15c>
 80010a4:	3501      	adds	r5, #1
 80010a6:	68e3      	ldr	r3, [r4, #12]
 80010a8:	9903      	ldr	r1, [sp, #12]
 80010aa:	1a5b      	subs	r3, r3, r1
 80010ac:	42ab      	cmp	r3, r5
 80010ae:	dcf2      	bgt.n	8001096 <_printf_i+0x212>
 80010b0:	e7eb      	b.n	800108a <_printf_i+0x206>
 80010b2:	2500      	movs	r5, #0
 80010b4:	f104 0619 	add.w	r6, r4, #25
 80010b8:	e7f5      	b.n	80010a6 <_printf_i+0x222>
 80010ba:	bf00      	nop
 80010bc:	080011ec 	.word	0x080011ec
 80010c0:	080011fd 	.word	0x080011fd

080010c4 <memmove>:
 80010c4:	4288      	cmp	r0, r1
 80010c6:	b510      	push	{r4, lr}
 80010c8:	eb01 0402 	add.w	r4, r1, r2
 80010cc:	d902      	bls.n	80010d4 <memmove+0x10>
 80010ce:	4284      	cmp	r4, r0
 80010d0:	4623      	mov	r3, r4
 80010d2:	d807      	bhi.n	80010e4 <memmove+0x20>
 80010d4:	1e43      	subs	r3, r0, #1
 80010d6:	42a1      	cmp	r1, r4
 80010d8:	d008      	beq.n	80010ec <memmove+0x28>
 80010da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80010de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010e2:	e7f8      	b.n	80010d6 <memmove+0x12>
 80010e4:	4402      	add	r2, r0
 80010e6:	4601      	mov	r1, r0
 80010e8:	428a      	cmp	r2, r1
 80010ea:	d100      	bne.n	80010ee <memmove+0x2a>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80010f6:	e7f7      	b.n	80010e8 <memmove+0x24>

080010f8 <_sbrk_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4d06      	ldr	r5, [pc, #24]	@ (8001114 <_sbrk_r+0x1c>)
 80010fc:	2300      	movs	r3, #0
 80010fe:	4604      	mov	r4, r0
 8001100:	4608      	mov	r0, r1
 8001102:	602b      	str	r3, [r5, #0]
 8001104:	f7ff fb40 	bl	8000788 <_sbrk>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	d102      	bne.n	8001112 <_sbrk_r+0x1a>
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	b103      	cbz	r3, 8001112 <_sbrk_r+0x1a>
 8001110:	6023      	str	r3, [r4, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	200001a8 	.word	0x200001a8

08001118 <memcpy>:
 8001118:	440a      	add	r2, r1
 800111a:	4291      	cmp	r1, r2
 800111c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001120:	d100      	bne.n	8001124 <memcpy+0xc>
 8001122:	4770      	bx	lr
 8001124:	b510      	push	{r4, lr}
 8001126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800112a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800112e:	4291      	cmp	r1, r2
 8001130:	d1f9      	bne.n	8001126 <memcpy+0xe>
 8001132:	bd10      	pop	{r4, pc}

08001134 <_realloc_r>:
 8001134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001138:	4680      	mov	r8, r0
 800113a:	4615      	mov	r5, r2
 800113c:	460c      	mov	r4, r1
 800113e:	b921      	cbnz	r1, 800114a <_realloc_r+0x16>
 8001140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001144:	4611      	mov	r1, r2
 8001146:	f7ff bc4b 	b.w	80009e0 <_malloc_r>
 800114a:	b92a      	cbnz	r2, 8001158 <_realloc_r+0x24>
 800114c:	f7ff fbdc 	bl	8000908 <_free_r>
 8001150:	2400      	movs	r4, #0
 8001152:	4620      	mov	r0, r4
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001158:	f000 f81a 	bl	8001190 <_malloc_usable_size_r>
 800115c:	4285      	cmp	r5, r0
 800115e:	4606      	mov	r6, r0
 8001160:	d802      	bhi.n	8001168 <_realloc_r+0x34>
 8001162:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001166:	d8f4      	bhi.n	8001152 <_realloc_r+0x1e>
 8001168:	4629      	mov	r1, r5
 800116a:	4640      	mov	r0, r8
 800116c:	f7ff fc38 	bl	80009e0 <_malloc_r>
 8001170:	4607      	mov	r7, r0
 8001172:	2800      	cmp	r0, #0
 8001174:	d0ec      	beq.n	8001150 <_realloc_r+0x1c>
 8001176:	42b5      	cmp	r5, r6
 8001178:	462a      	mov	r2, r5
 800117a:	4621      	mov	r1, r4
 800117c:	bf28      	it	cs
 800117e:	4632      	movcs	r2, r6
 8001180:	f7ff ffca 	bl	8001118 <memcpy>
 8001184:	4621      	mov	r1, r4
 8001186:	4640      	mov	r0, r8
 8001188:	f7ff fbbe 	bl	8000908 <_free_r>
 800118c:	463c      	mov	r4, r7
 800118e:	e7e0      	b.n	8001152 <_realloc_r+0x1e>

08001190 <_malloc_usable_size_r>:
 8001190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001194:	1f18      	subs	r0, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	bfbc      	itt	lt
 800119a:	580b      	ldrlt	r3, [r1, r0]
 800119c:	18c0      	addlt	r0, r0, r3
 800119e:	4770      	bx	lr

080011a0 <_init>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	bf00      	nop
 80011a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a6:	bc08      	pop	{r3}
 80011a8:	469e      	mov	lr, r3
 80011aa:	4770      	bx	lr

080011ac <_fini>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	bf00      	nop
 80011b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b2:	bc08      	pop	{r3}
 80011b4:	469e      	mov	lr, r3
 80011b6:	4770      	bx	lr
